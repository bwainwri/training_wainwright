---
title: "Intro to Data Visualization"
author: "Brooke Wainwright"
format: html
---

## Setup
```{r}
#| message: false
#| warning: false
#| echo: false

library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color palette
```

## Read Data
```{r}
#| message: false
#| warning: false

delta_visits_raw <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f")
```


## Data Exploration
```{r}
#| eval: false
colnames(delta_visits_raw)
glimpse(delta_visits_raw)
unique(delta_visits_raw$Date)

```
## Getting data ready for visualization

Data is not tidy, multiple observations in one row. Person type and boat type need to be their own columns

```{r}
delta_visit <- delta_visits_raw %>% 
  janitor::clean_names()
# this function makes everything snake case and lowercase everything. SO cool.

colnames(delta_visit)
```

Transforming data from wide to long

```{r}
visits_long <- delta_visit %>% 
  pivot_longer(cols = c(sm_boat,med_boat,lrg_boat, bank_angler, scientist, cars), 
               names_to = "visitor_type",
               values_to = "quantity") %>% 
  rename(restore_loc = eco_restore_approximate_location) %>% 
  select(-notes)
```

Calculate the daily visits to restoration locations

```{r}
#| warning: false
#| message: false
daily_visits_loc <- visits_long %>%
    group_by(restore_loc, date, visitor_type) %>% 
    summarise(daily_visits = sum(quantity))
    
head(daily_visits_loc)
```

## Plotting with `ggplot2`

There are 4 main things:
- call ggplot function
- call the data
- define the aesthetic, what am I going to plot
- add geom, how should it be plotted

```{r}
ggplot(data = daily_visits_loc, 
      aes(x = restore_loc,
      y = daily_visits)) +
  geom_col()
```

Customizing our plot
```{r}
ggplot(data = daily_visits_loc, 
      aes(x = restore_loc,
          y = daily_visits,
          fill = "blue")) + 
  geom_col()

ggplot(data = daily_visits_loc, 
      aes(x = restore_loc,
          y = daily_visits)) + 
  geom_col(fill = "blue")
```

Making the bars blue didn't work because "fill" was inside the aes function and so ggplot was looking for differences within our data to change the color of. It created a new column and gave it the value blue. Once we say fill it will start to add color but pull from it's own color palette. If we do fill in geom-col, that works

Let's fill the bars by visitor type

```{r}
ggplot(data = daily_visits_loc, 
      aes(x = restore_loc,
          y = daily_visits,
          fill = visitor_type)) + 
  geom_col()
```


- use the `labs()` function to modify the labels
- flip the x and y axis
- modify the theme

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    theme_bw()+
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank())+
  scale_y_continuous(breaks = seq(0,120,20),
                     expand = c(0,0))
```

In order to give an order to the columns plotted, we're going to add something to our data. create a new column with total sum of daily visits and use that to order your plot
```{r}
daily_visits_total <- daily_visits_loc %>% 
  group_by(restore_loc) %>% 
  mutate(n = sum(daily_visits)) %>% 
  ungroup()
```

The `forecast` package and the `fct_order()` allows you to display one variable, but order it by another hidden variable

```{r}
ggplot(data = daily_visits_total,
       aes(x = fct_reorder(restore_loc, n),
           y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    labs(x = "Restoration Location",
         y = "Number of Visits",
         fill = "Type of Visitor",
         title = "Total Number of Visits to Delta Restoration Areas by visitor type",
         subtitle = "Sum of all visits during July 2017 and March 2018")+
    coord_flip()+
    theme_bw()+
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank())+
  scale_y_continuous(breaks = seq(0,120,20),
                     expand = c(0,0))+
  scale_fill_viridis_d()
```

## Saving plot
Quart documents start their file path wherever they are saved, which in this case is script. Two periods tell the path to go backward one step in file path. Better option is to use `here()`.
`ggsave()` by default saves the last made ggplot, but you can also tell it the exact plot you want using the plot as an object

```{r}
library(here)

ggsave(here::here("plots/visits_restore_site_delta.jpg"), width = 12, height = 6, units = "in")


```

## Interactive tables with DT
```{r}
locations <- visits_long %>% 
  distinct(restore_loc, .keep_all = TRUE) %>% 
  select(restore_loc, latitude, longitude)

```

```{r}
# creates an interactive table
datatable(locations)
```

## Interactive map with leaflet

```{r}
# to layer on leaflet we use pipe instead of plus sign

leaflet(locations) %>% 
  addTiles() %>% 
  addMarkers(
    lng = ~longitude,
    lat = ~latitude,
    popup = ~restore_loc
  )
```


THis is so cool. the pop up allows us to hover over points and it tells us the restore loc.


Custom Leaflet map

```{r}
leaflet(locations) %>%
    addWMSTiles( # add specific tile from this url
        "https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)

# In order to be interactive it needs to be HTML
# or use shiny apps
```

Customize base maps

```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSImageryTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```


